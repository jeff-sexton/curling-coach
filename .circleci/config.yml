version: 2.1 # Use 2.1 to enable using orbs and other features.

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/using-orbs/
orbs:
  ruby: circleci/ruby@1.0 
  node: circleci/node@2

jobs:
  # build: # our first job, named "build"
  #   docker:
  #     - image: cimg/ruby:2.7-node # use a tailored CircleCI docker image.
  #   steps:
  #     - checkout # pull down our git code.
  #     - ruby/install-deps # use the ruby orb to install dependencies
  #     # use the node orb to install our packages
  #     # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
  #     # learn more: https://circleci.com/docs/2.0/caching/
  #     - node/install-packages: 
  #         pkg-manager: yarn
  #         cache-key: "yarn.lock"
          
  build: 
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    # parallelism: 3 
    # here we set TWO docker images.
    docker:
      - image: cimg/ruby:2.7-node # this is our primary docker image, where step commands run.
      - image: circleci/postgres:9.5-alpine 
        environment: # add POSTGRES environment variables.
          POSTGRES_USER: curling-coach
          POSTGRES_DB: curling_coach_test
          POSTGRES_PASSWORD: development
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      PGHOST: 127.0.0.1
      PGUSER: curling-coach
      PGPASSWORD: development
      RAILS_ENV: test
  

    working_directory: ~/client
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout 
      - ruby/install-deps:
          with-cache: true

      - node/install-packages:
          pkg-manager: yarn
          cache-key: "yarn.lock"
      # Here we make sure that the secondary container boots 
      # up before we run operations on the database.
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - ruby/rspec-test
  deploy:
    machine:
      enabled: true
    
    working_directory: ~/client

    steps:
      - add_ssh_keys:
          fingerprints:
            - "f6:99:c9:83:18:84:8e:cb:f5:e2:51:b6:e9:45:2d:47"
      - checkout
      - run:
          name: Push Master to Production
          command: |
            git push git@github.com:jeff-sexton/curling-coach.git master:production


workflows:
  version: 2
  build_test_and_deploy:     
    jobs:            
      - build:
          filters:
            branches:
              ignore: production
      - deploy: 
          filters:
            branches:
              ignore: production       
          requires:  
            - build   